// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRepository) Get(alias, id string) (*URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", alias, id)
	ret0, _ := ret[0].(*URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(alias, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), alias, id)
}

// GetMostUsed mocks base method.
func (m *MockRepository) GetMostUsed() ([]*URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostUsed")
	ret0, _ := ret[0].([]*URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostUsed indicates an expected call of GetMostUsed.
func (mr *MockRepositoryMockRecorder) GetMostUsed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostUsed", reflect.TypeOf((*MockRepository)(nil).GetMostUsed))
}

// Save mocks base method.
func (m *MockRepository) Save(user *URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), user)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockService) Get(ctx context.Context, alias string) (*URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, alias)
	ret0, _ := ret[0].(*URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), ctx, alias)
}

// GetMostUsed mocks base method.
func (m *MockService) GetMostUsed(ctx context.Context) ([]*URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostUsed", ctx)
	ret0, _ := ret[0].([]*URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostUsed indicates an expected call of GetMostUsed.
func (mr *MockServiceMockRecorder) GetMostUsed(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostUsed", reflect.TypeOf((*MockService)(nil).GetMostUsed), ctx)
}

// SaveNoCustomAlias mocks base method.
func (m *MockService) SaveNoCustomAlias(ctx context.Context, user *URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNoCustomAlias", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNoCustomAlias indicates an expected call of SaveNoCustomAlias.
func (mr *MockServiceMockRecorder) SaveNoCustomAlias(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNoCustomAlias", reflect.TypeOf((*MockService)(nil).SaveNoCustomAlias), ctx, user)
}

// SaveWithCustomAlias mocks base method.
func (m *MockService) SaveWithCustomAlias(ctx context.Context, user *URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWithCustomAlias", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWithCustomAlias indicates an expected call of SaveWithCustomAlias.
func (mr *MockServiceMockRecorder) SaveWithCustomAlias(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWithCustomAlias", reflect.TypeOf((*MockService)(nil).SaveWithCustomAlias), ctx, user)
}
